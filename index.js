const _0x2c34ba = _0x274c; (function (_0x15e73, _0x40569b) { const _0x5ce8d9 = _0x274c, _0x8fe59c = _0x15e73(); while (!![]) { try { const _0x32ea6f = -parseInt(_0x5ce8d9(0x17c)) / 0x1 + parseInt(_0x5ce8d9(0x1a5)) / 0x2 * (parseInt(_0x5ce8d9(0x141)) / 0x3) + -parseInt(_0x5ce8d9(0x191)) / 0x4 * (parseInt(_0x5ce8d9(0x133)) / 0x5) + parseInt(_0x5ce8d9(0x172)) / 0x6 + parseInt(_0x5ce8d9(0x157)) / 0x7 + -parseInt(_0x5ce8d9(0x158)) / 0x8 * (parseInt(_0x5ce8d9(0x1c9)) / 0x9) + parseInt(_0x5ce8d9(0x185)) / 0xa; if (_0x32ea6f === _0x40569b) break; else _0x8fe59c['push'](_0x8fe59c['shift']()); } catch (_0x23dcde) { _0x8fe59c['push'](_0x8fe59c['shift']()); } } }(_0x4a6d, 0x73e37)); const { Server, ServerEvent } = require('socket-be'), WebSocket = require('ws'), fetch = require('node-fetch'), wanakana = require(_0x2c34ba(0x13e)), fs = require('fs'), JSON5 = require(_0x2c34ba(0x18e)), getPort = require('get-port'), { Client } = require('ssh2'), net = require('net'), configPath = _0x2c34ba(0x1b4), config = JSON5[_0x2c34ba(0x162)](fs[_0x2c34ba(0x1b7)](configPath, _0x2c34ba(0x19b))); let { app_id = '', secret_key = '', username = '', sub_domain = '', sub_domain2 = '', ssh_password = '', port = 0x4abc, web_port = 0x1f40, proximity = !![], spectator = !![], specListen = !![], specDim = ![], password = ![], distance = 0x6, lang = 'en' } = config, roomId = sub_domain, stop_roop = ![], passwords = {}, positions = {}, yRots = {}, dimentions = {}, shouldBroadcast = ![], wss, relayWs, mainWorld, vcSSHClient, mcSSHClient, spectators = {}; const server_log_info = _0x4b5f5a => console[_0x2c34ba(0x184)](_0x2c34ba(0x178) + _0x4b5f5a), server_log_log = _0x305a4a => console[_0x2c34ba(0x184)](_0x2c34ba(0x189) + _0x305a4a), processName = _0x209ec3 => wanakana['toRomaji'](_0x209ec3[_0x2c34ba(0x18c)](/ /g, '_'))['replace'](/n'/g, 'n'), RELAY_SERVER_DOMAIN = _0x2c34ba(0x17a); function startSshForwarding(_0x285a09, _0x355cd8, _0x56a480) { const _0x21087d = _0x2c34ba; if (!_0x285a09 || !username || !ssh_password) return; const _0x30d726 = _0x56a480 === 'vc', _0x1c7b56 = _0x30d726 ? _0x21087d(0x13c) : '[MC\x20SSH]', _0x630b42 = { 'host': _0x21087d(0x195), 'port': 0x16, 'username': username, 'password': ssh_password }, _0x42a0e0 = { 'remoteAddr': _0x285a09, 'remotePort': 0x50, 'localAddr': _0x21087d(0x1c1), 'localPort': _0x355cd8 }, _0x4cd679 = new Client(); return _0x4cd679['on'](_0x21087d(0x1a9), () => { const _0x5a15b1 = _0x21087d; _0x4cd679['forwardIn'](_0x42a0e0[_0x5a15b1(0x170)], _0x42a0e0['remotePort'], _0x2f32c4 => { const _0x3c7a4d = _0x5a15b1; if (_0x2f32c4) return console['error'](_0x1c7b56 + _0x3c7a4d(0x175) + _0x285a09 + '):', _0x2f32c4[_0x3c7a4d(0x181)]), server_log_info(_0x1c7b56 + _0x3c7a4d(0x1d4)), connectToRelayServer(_0x56a480), _0x4cd679['end'](); console[_0x3c7a4d(0x184)](_0x3c7a4d(0x153)), _0x30d726 ? (server_log_info(_0x3c7a4d(0x182) + _0x285a09), server_log_info(_0x3c7a4d(0x18d)), server_log_info('Participants\x20should\x20access\x20this\x20URL'), server_log_info(_0x3c7a4d(0x1d0) + _0x285a09)) : (server_log_info(_0x3c7a4d(0x1d1)), server_log_info(_0x3c7a4d(0x160)), server_log_info(_0x3c7a4d(0x134) + _0x285a09 + _0x3c7a4d(0x1b8))), console[_0x3c7a4d(0x184)](_0x3c7a4d(0x179)); }), _0x4cd679['on'](_0x5a15b1(0x136), (_0x38a78b, _0x462901) => { const _0x30bf30 = _0x5a15b1, _0x448991 = _0x462901(), _0x2978ad = net[_0x30bf30(0x152)]({ 'host': _0x42a0e0[_0x30bf30(0x148)], 'port': _0x42a0e0[_0x30bf30(0x1ca)] }); _0x2978ad['on'](_0x30bf30(0x149), () => _0x448991[_0x30bf30(0x14e)](_0x2978ad)['pipe'](_0x448991)), _0x2978ad['on'](_0x30bf30(0x1c3), _0x78d516 => { const _0x7445f3 = _0x30bf30; console[_0x7445f3(0x1c3)](_0x7445f3(0x1ce) + _0x285a09 + '):', _0x78d516[_0x7445f3(0x181)]), _0x448991[_0x7445f3(0x156)](); }), _0x448991['on'](_0x30bf30(0x156), () => _0x2978ad[_0x30bf30(0x1b9)]()); }); })['on']('error', _0xe766d6 => { const _0x301e8e = _0x21087d; console['error']('❌\x20SSH\x20Error\x20(' + _0x285a09 + '):', _0xe766d6[_0x301e8e(0x181)]), server_log_info(_0x1c7b56 + '中継サーバーを使用します\x20(Relay\x20server\x20will\x20be\x20used)'), connectToRelayServer(_0x56a480); }), _0x4cd679['connect'](_0x630b42), _0x4cd679; } async function setupWebSocketServer() { const _0x1786af = _0x2c34ba; if (sub_domain === '' || username === '' || ssh_password === '') return; wss = new WebSocket[(_0x1786af(0x17f))]({ 'port': web_port }), wss['on'](_0x1786af(0x150), _0x2d9ae6 => { const _0x6fb33e = _0x1786af; _0x2d9ae6['on']('message', _0x583c7e => { const _0x325fc8 = _0x274c; try { const { userName: _0x4faf26, position: _0x474861 } = JSON['parse'](_0x583c7e); if (_0x4faf26 && _0x474861) positions[_0x4faf26] = _0x474861; } catch (_0x3d4d5b) { console['error'](_0x325fc8(0x1bd), _0x3d4d5b); } }), _0x2d9ae6['on'](_0x6fb33e(0x1c3), _0x4f45e7 => console[_0x6fb33e(0x1c3)](_0x6fb33e(0x1ac), _0x4f45e7)); }), vcSSHClient = startSshForwarding(sub_domain, web_port, 'vc'); if (sub_domain2) mcSSHClient = startSshForwarding(sub_domain2, port, 'mc'); else console[_0x1786af(0x184)](_0x1786af(0x153)), server_log_info(_0x1786af(0x1d1)), server_log_info(_0x1786af(0x160)), server_log_info(_0x1786af(0x197) + port), console[_0x1786af(0x184)](_0x1786af(0x179)); process['on']('SIGINT', () => { const _0x2b8295 = _0x1786af; console[_0x2b8295(0x184)](_0x2b8295(0x186)); if (vcSSHClient) vcSSHClient[_0x2b8295(0x1b9)](); if (mcSSHClient) mcSSHClient[_0x2b8295(0x1b9)](); process['exit'](); }); } function broadcastPositions() { const _0x4390b9 = _0x2c34ba, _0x2fb41c = JSON['stringify']({ 'type': 'world_update', 'proximity': proximity, 'positions': positions, 'distance': distance, 'spectator': spectator, 'spectators': spectators, 'specListen': specListen, 'specDim': specDim, 'yRots': yRots, 'dimentions': dimentions, 'password': password, 'passwords': passwords, 'app_id': app_id, 'secret_key': secret_key }); if ((sub_domain === '' || username === '' || ssh_password === '') && relayWs?.['readyState'] === WebSocket['OPEN']) relayWs['send'](_0x2fb41c); else sub_domain && username && ssh_password && wss[_0x4390b9(0x1b6)][_0x4390b9(0x15b)](_0x3b48e6 => { const _0x54bb4d = _0x4390b9; _0x3b48e6['readyState'] === WebSocket[_0x54bb4d(0x1c2)] && _0x3b48e6[_0x54bb4d(0x1ad)](_0x2fb41c); }); } function _0x4a6d() { const _0x90fcb = ['WorldRemove', 'Host-only\x20command：\x0a\x20\u00a0!lang\x20-\x20!lang\x20<ja/en>\x20言語を変更できます\x0a\x20\u00a0!dis\x20-\x20!dis\x20<Number>\x20set\x20max\x20distance\x0a\x20\u00a0!pvc\x20-\x20!pvc\x20<true/false>\x20enable/disable\x20proximity\x20voice\x20chat\x0a\x20\u00a0!spectator\x20-\x20!spectator\x20<true/false>\x20separate\x20spectator\x20and\x20VC\x0a\x20\u00a0!specListen\x20-\x20!specListen\x20<true/false>\x20Spectator\x20can\x20listen\x20to\x20other\x20gamemode\x20players\x0a\x20\u00a0!specDim\x20-\x20!specDim\x20<true/false>\x20Spectator`s\x20VC\x20separated\x20by\x20dimension\x0a\x20\u00a0!password\x20-\x20!password\x20<true/false>\x20enable/disable\x20password', 'position', 'run_command', 'name', 'specListen', '参加:\x20', 'remoteAddr', 'スペクテイターを共通のVCにしました', '3099294aIzZCC', '?clientType=server_script', 'details', '❌\x20ポートフォワーディング失敗\x20(', 'Proximity\x20VC\x20enabled', 'distance', '\x1b[36m[Info]\x1b[0m\x20', '=======================================================\x0a', 'mcproxvc.tcpexposer.com', 'Connection\x20started\x0aProximity\x20voice\x20chat:', '273805zcRMNM', 'Using\x20Proximity\x20Voice\x20Chat\x0aURL:https://proximity-vc-mcbe.pages.dev/\x0aRoomID\x20is\x20', 'floor', 'Server', '[MC\x20Relay]', 'message', 'ROOM\x20ID:\x20', 'WorldAdd', 'log', '1046950XIchdc', '終了シグナル受信。SSH接続を停止します...', 'disabled', '接続開始:\x20', '\x1b[33m[Log]\x1b[0m\x20', 'values', 'Asia/Tokyo', 'replace', '参加者はこのURLにアクセスしてください:', 'json5', 'Spectator\x20set\x20to\x20common\x20VC', 'Password\x20disabled', '8fRIAOS', '★★★\x20[MC\x20Relay]\x20パートナー接続通知を受信。ローカルブリッジを構築します。\x20★★★', 'from', 'PlayerChat', 'tcpexposer.com', 'Spectator\x20can\x20listen\x20to\x20other\x20gamemode\x20players', '/connect\x20localhost:', '\x0a!help\x20でコマンド一覧を確認できます', 'localPlayer', 'socket-beサーバーのポート:\x20', 'utf8', '[MC\x20Local\x20WS\x20Error]', 'command_result', 'players', '\x20スペクテイター同士の会話をディメンションごとに分けました', 'enabled', 'です\x0aあなたのVCnameは', 'querytarget\x20@e[type=player]', 'json', 'スペクテイターが他モードプレイヤーの会話を聞けるようになました', '382FVpiRi', 'spectators', 'Command\x20list:\x0a\x20\u00a0!help\x20-\x20show\x20help\x0a\x20\u00a0!name\x20-\x20check\x20your\x20VC\x20name', 'action', 'ready', 'includes', 'testfor\x20@a[m=spectator]', 'WebSocket\x20error:', 'send', '\x20WebSocket\x20error:', 'victim', '\x20処理中にエラーが発生しました:', 'URL:https://proximity-vc-mcbe.pages.dev/\x0aルームIDは', 'stringify', 'ws://127.0.0.1:', './config.json', '近接vcを有効にしました', 'clients', 'readFileSync', '.tcpexposer.com', 'end', 'random', 'dimension', '\x0aYour\x20VCname\x20is\x20', 'WebSocketメッセージの解析に失敗:', '\x22\x5cs*:\x5cs*)(?:\x22.*?\x22|\x5cd+\x5c.?\x5cd*|true|false)', 'パスワードを有効にしました', 'Proximity\x20VC\x20disabled', 'localhost', 'OPEN', 'error', 'Spectator`s\x20VC\x20separated\x20by\x20dimension', '近接VCを使用中です\x0aURL:https://proximity-vc-mcbe.pages.dev/\x0aルームIDは', 'URL:https://proximity-vc-mcbe.pages.dev/\x0aRoomID\x20is\x20', 'readyState', '\x0a声の届く距離：', '36snohRw', 'localPort', 'type', 'all', 'パスワードを無効にしました', 'ローカル接続エラー\x20(', 'alive', 'https://proximity-vc-mcbe.pages.dev?roomid=', 'Minecraftから以下のコマンドで接続してください:', '接続終了:\x20', 'value', '中継サーバーを使用します\x20(Relay\x20server\x20will\x20be\x20used)', 'assign', '735510rHnxbQ', '/connect\x20', 'Open', 'tcp\x20connection', '接続を開始しました\x0a近接vc：', 'に変更しました', '退出:\x20', 'sendMessage', 'コマンド一覧：\x0a\x20\u00a0!help\x20-\x20ヘルプを表示します\x0a\x20\u00a0!name\x20-\x20VCで使う名前を確認できます', '[VC\x20SSH]', 'open', 'wanakana', '/room/', 'Participants\x20should\x20access\x20this\x20URL', '3012xMoiNX', 'indexOf', 'proximity', 'split', 'string', 'Password\x20enabled', 'false', 'localAddr', 'connect', 'PlayerLoad', '<近接VC>言語を日本語に設定しました', 'Password\x20is\x20', 'yRot', 'pipe', '\x20Relay\x20server\x20disconnected\x20(ID:\x20', 'connection', 'toString', 'createConnection', '\x0a=======================================================', '近接vcを無効にしました', 'writeFileSync', 'close', '1785896dsFHML', '50896fKIKQI', 'ホスト専用コマンド：\x0a\x20\u00a0!lang\x20-\x20!lang\x20<ja/en>\x20chenge\x20language\x0a\x20\u00a0!dis\x20-\x20!dis\x20<数値>\x20で声の届く距離を変更できます\x0a\x20\u00a0!pvc\x20-\x20!pvc\x20<true/false>\x20で近接vcを有効/無効にできます\x0a\x20\u00a0!spectator\x20-\x20!spectator\x20<true/false>\x20でスペクテイターとVCを分けます\x0a\x20\u00a0!specListen\x20-\x20!specListen\x20<true/false>\x20でスペクテイターが他モードプレイヤーの会話を聞けるようになります\x20\x0a\x20\u00a0!specDim\x20-\x20!specDim\x20<true/false>\x20でスペクテイター同士の会話をディメンションごとに分けます\x0a\x20\u00a0!password\x20-\x20!password\x20<true/false>\x20でパスワードを有効/無効にできます', 'spectator', 'forEach', 'runCommand', 'wss://', 'true', 'specDim', 'Connect\x20from\x20Minecraft\x20with\x20the\x20following\x20command:', '--------------------', 'parse', 'roomId', '<Proximity\x20VC>Language\x20set\x20to\x20English', 'Changed\x20max\x20distance\x20to\x20', 'password', '[MC\x20Relay]\x20ローカルのsocket-beに接続成功。', 'パスワードは']; _0x4a6d = function () { return _0x90fcb; }; return _0x4a6d(); } function _0x274c(_0x5e9afb, _0x5f4ded) { const _0x4a6de3 = _0x4a6d(); return _0x274c = function (_0x274cd2, _0x26e06d) { _0x274cd2 = _0x274cd2 - 0x133; let _0xe36d60 = _0x4a6de3[_0x274cd2]; return _0xe36d60; }, _0x274c(_0x5e9afb, _0x5f4ded); } async function handleWorld(_0x337662) { const _0x460ed8 = _0x2c34ba; try { const _0x14fe3a = Array[_0x460ed8(0x193)](_0x337662[_0x460ed8(0x19e)][_0x460ed8(0x18a)](), _0x593aff => String(_0x593aff['name'])); let _0x3d0e7d = {}; if (proximity) { const [_0x4d0892, _0x15715d, _0x27051b] = await Promise[_0x460ed8(0x1cc)]([_0x337662[_0x460ed8(0x15c)]('testfor\x20@e[type=player]'), _0x337662[_0x460ed8(0x15c)](_0x460ed8(0x1ab)), _0x337662['runCommand'](_0x460ed8(0x1a2))]); _0x3d0e7d = { 'alive': _0x4d0892['victim'] || [], 'spectators': _0x15715d[_0x460ed8(0x1af)] || [], 'details': JSON['parse'](_0x27051b[_0x460ed8(0x174)] || '[]') }; } _0x14fe3a[_0x460ed8(0x15b)](_0x591eff => { const _0x161020 = _0x460ed8; let _0x569558; if (proximity) _0x569558 = _0x3d0e7d[_0x161020(0x1cf)][_0x161020(0x142)](_0x591eff); const _0x2a0adf = processName(_0x591eff); _0x3d0e7d[_0x161020(0x1a6)][_0x161020(0x1aa)](_0x591eff) ? spectators[_0x2a0adf] = !![] : spectators[_0x2a0adf] = ![]; if (!proximity) positions[_0x2a0adf] = { 'x': 0x0, 'y': 0x2710, 'z': 0x0 }; else { if (!_0x3d0e7d[_0x161020(0x1cf)][_0x161020(0x1aa)](_0x591eff)) positions[_0x2a0adf] = { 'x': 0x0, 'y': 0x4e20, 'z': 0x0 }; else { if (spectator && _0x3d0e7d[_0x161020(0x1a6)]['includes'](_0x591eff)) { if (specListen === !![]) positions[_0x2a0adf] = _0x3d0e7d[_0x161020(0x174)][_0x569558][_0x161020(0x16b)]; else positions[_0x2a0adf] = { 'x': 0x0, 'y': 0x2710, 'z': 0x0 }; if (specDim === !![]) dimentions[_0x2a0adf] = _0x3d0e7d['details'][_0x569558][_0x161020(0x1bb)]; } else _0x3d0e7d['details'][_0x569558]?.[_0x161020(0x16b)] ? (positions[_0x2a0adf] = _0x3d0e7d['details'][_0x569558][_0x161020(0x16b)], yRots[_0x2a0adf] = _0x3d0e7d[_0x161020(0x174)][_0x569558][_0x161020(0x14d)], dimentions[_0x2a0adf] = _0x3d0e7d[_0x161020(0x174)][_0x569558]['dimension']) : positions[_0x2a0adf] = { 'x': 0x0, 'y': 0x7530, 'z': 0x0 }; } } }), shouldBroadcast = !![]; } catch (_0x101795) { console[_0x460ed8(0x1c3)]('Error\x20handling\x20world:', _0x101795); } if (!stop_roop) setTimeout(() => handleWorld(_0x337662), 0x64); } async function connectToRelayServer(_0x283cf8) { const _0x44d63f = _0x2c34ba, _0xd4cc9d = _0x283cf8 === 'mc', _0xc8ac4b = _0xd4cc9d ? _0x44d63f(0x180) : '[VC\x20Relay]'; try { const _0x4f1ec0 = await fetch('https://' + RELAY_SERVER_DOMAIN + '/create-room'), _0x3b222d = await _0x4f1ec0[_0x44d63f(0x1a3)](), _0x32948b = _0x3b222d[_0x44d63f(0x163)]; roomId = _0x32948b, console['log'](_0x44d63f(0x153)); _0xd4cc9d ? (server_log_info(_0x44d63f(0x1d1)), server_log_info(_0x44d63f(0x160)), server_log_info(_0x44d63f(0x134) + RELAY_SERVER_DOMAIN + _0x44d63f(0x13f) + _0x32948b)) : (server_log_info(_0x44d63f(0x182) + _0x32948b), server_log_info(_0x44d63f(0x18d)), server_log_info(_0x44d63f(0x140)), server_log_info(_0x44d63f(0x1d0) + _0x32948b)); console[_0x44d63f(0x184)](_0x44d63f(0x179)); const _0x4c4472 = new WebSocket(_0x44d63f(0x15d) + RELAY_SERVER_DOMAIN + _0x44d63f(0x13f) + _0x32948b + _0x44d63f(0x173)); if (!_0xd4cc9d) relayWs = _0x4c4472; _0x4c4472['on'](_0x44d63f(0x13d), () => console[_0x44d63f(0x184)](_0xc8ac4b + '\x20Relay\x20server\x20connected\x20(ID:\x20' + _0x32948b + ')')), _0x4c4472['on'](_0x44d63f(0x156), () => console[_0x44d63f(0x184)](_0xc8ac4b + _0x44d63f(0x14f) + _0x32948b + ')')), _0x4c4472['on'](_0x44d63f(0x1c3), _0x479e93 => console['error'](_0xc8ac4b + _0x44d63f(0x1ae), _0x479e93)), _0xd4cc9d ? setupMcRelayListeners(_0x4c4472) : setupVcRelayListeners(_0x4c4472); } catch (_0x527c6d) { console[_0x44d63f(0x1c3)](_0xc8ac4b + _0x44d63f(0x1b0), _0x527c6d); } } function setupVcRelayListeners(_0x45e652) { _0x45e652['on']('message', async _0x26e3e6 => { const _0x18a3a4 = _0x274c; try { const _0x30e309 = JSON[_0x18a3a4(0x162)](_0x26e3e6['toString']()); if (mainWorld && _0x30e309[_0x18a3a4(0x1a8)] === _0x18a3a4(0x16c) && typeof _0x30e309['value'] === _0x18a3a4(0x145)) { const _0x42db50 = await mainWorld[_0x18a3a4(0x15c)](_0x30e309[_0x18a3a4(0x1d3)]); _0x45e652[_0x18a3a4(0x1ad)](JSON[_0x18a3a4(0x1b2)]({ 'type': _0x18a3a4(0x19d), 'payload': _0x42db50 })); } } catch (_0x167b0f) { console[_0x18a3a4(0x1c3)]('[VC\x20Relay]\x20メッセージ処理エラー:', _0x167b0f); } }); } function setupMcRelayListeners(_0x33121f) { const _0x496f3d = _0x2c34ba; let _0x10181f; _0x33121f['on']('message', _0x336fb6 => { const _0x132f51 = _0x274c; try { const _0x107fd2 = JSON[_0x132f51(0x162)](_0x336fb6[_0x132f51(0x151)]()); if (_0x107fd2[_0x132f51(0x1cb)] === 'partner_connected') { console[_0x132f51(0x184)](_0x132f51(0x192)), _0x10181f = new WebSocket(_0x132f51(0x1b3) + port), _0x10181f['on'](_0x132f51(0x13d), () => console[_0x132f51(0x184)](_0x132f51(0x167))), _0x10181f['on']('message', _0x493554 => _0x33121f[_0x132f51(0x1c7)] === WebSocket[_0x132f51(0x1c2)] && _0x33121f[_0x132f51(0x1ad)](_0x493554)), _0x10181f['on'](_0x132f51(0x156), () => _0x33121f[_0x132f51(0x1c7)] === WebSocket[_0x132f51(0x1c2)] && _0x33121f['close']()), _0x10181f['on'](_0x132f51(0x1c3), _0x157d2b => console['error'](_0x132f51(0x19c), _0x157d2b[_0x132f51(0x181)])); return; } } catch (_0x4b5aa4) { } _0x10181f?.[_0x132f51(0x1c7)] === WebSocket[_0x132f51(0x1c2)] && _0x10181f[_0x132f51(0x1ad)](_0x336fb6); }), _0x33121f['on']('close', () => _0x10181f?.[_0x496f3d(0x156)]()); } async function main() { const _0x12e429 = _0x2c34ba; port = await getPort({ 'port': port }), web_port = await getPort({ 'port': web_port }), server_log_info(_0x12e429(0x19a) + port); const _0x53dfa0 = new Server({ 'port': port, 'disableEncryption': !![], 'timezone': _0x12e429(0x18b) }), _0xbf2141 = (_0x34a5d2, _0x1f4473) => { const _0x3c10ba = _0x12e429; try { let _0x66c1f8 = fs['readFileSync'](configPath, _0x3c10ba(0x19b)); const _0x5dbf07 = new RegExp('(\x22' + _0x34a5d2 + _0x3c10ba(0x1be)), _0x12ebe9 = typeof _0x1f4473 === _0x3c10ba(0x145) ? '\x22' + _0x1f4473 + '\x22' : _0x1f4473, _0x2e2a0c = _0x66c1f8['replace'](_0x5dbf07, '$1' + _0x12ebe9); _0x2e2a0c !== _0x66c1f8 && fs[_0x3c10ba(0x155)](configPath, _0x2e2a0c, _0x3c10ba(0x19b)); } catch (_0x13c24d) { console[_0x3c10ba(0x1c3)]('❌\x20設定ファイルの更新に失敗しました:', _0x13c24d); } }, _0x46be41 = (_0x3ab41f, _0x3ed706, _0x3b0135) => async (_0x394a00, _0x50e406, _0x33760b) => { const _0x33aab9 = _0x12e429; if (_0x50e406['name'] !== _0x394a00[_0x33aab9(0x199)][_0x33aab9(0x16d)]) return; if (_0x33760b[0x0] !== _0x33aab9(0x15e) && _0x33760b[0x0] !== _0x33aab9(0x147)) return; const _0x39153b = _0x33760b[0x0] === 'true'; if (_0x3ab41f === _0x33aab9(0x166)) password = _0x39153b; else { if (_0x3ab41f === _0x33aab9(0x143)) proximity = _0x39153b; else { if (_0x3ab41f === _0x33aab9(0x15a)) spectator = _0x39153b; else { if (_0x3ab41f === _0x33aab9(0x16e)) specListen = _0x39153b; else { if (_0x3ab41f === _0x33aab9(0x15f)) specDim = _0x39153b; } } } } _0xbf2141(_0x3ab41f, _0x39153b), Object[_0x33aab9(0x1d5)](global, { [_0x3ab41f]: _0x39153b }); const _0x505a8a = lang === 'ja' ? _0x39153b ? _0x3ed706[_0x33aab9(0x1a0)] : _0x3ed706[_0x33aab9(0x187)] : _0x39153b ? _0x3b0135[_0x33aab9(0x1a0)] : _0x3b0135['disabled']; await _0x394a00[_0x33aab9(0x13a)](_0x505a8a); }, _0x3d60ce = { '!dis': async (_0x264428, _0x4fb0fc, _0x43da9a) => { const _0x7d0a30 = _0x12e429; try { if (_0x4fb0fc[_0x7d0a30(0x16d)] !== _0x264428[_0x7d0a30(0x199)]['name']) return; const _0x3dbbf0 = Number(_0x43da9a[0x0]); if (!isNaN(_0x3dbbf0)) { distance = _0x3dbbf0, _0xbf2141(_0x7d0a30(0x177), _0x3dbbf0); const _0x277c63 = lang === 'ja' ? '声の最大距離を' + distance + _0x7d0a30(0x138) : _0x7d0a30(0x165) + distance; await _0x264428[_0x7d0a30(0x13a)](_0x277c63); } } catch (_0x2ff187) { } }, '!name': async (_0x28f4ca, _0x494700) => { const _0x2ac01b = _0x12e429; try { const _0x157ec8 = processName(_0x494700['name']), _0xa13c3f = _0x2ac01b(0x1b1) + roomId + _0x2ac01b(0x1a1) + _0x157ec8 + 'です', _0x26bda4 = _0x2ac01b(0x1c6) + roomId + _0x2ac01b(0x1bc) + _0x157ec8; await _0x494700[_0x2ac01b(0x13a)](lang === 'ja' ? _0xa13c3f : _0x26bda4); if (password) { !passwords[_0x157ec8] && (passwords[_0x157ec8] = Math['floor'](0x3e8 + Math[_0x2ac01b(0x1ba)]() * 0x2328)[_0x2ac01b(0x151)]()); const _0x3a338d = lang === 'ja' ? 'パスワードは' + passwords[_0x157ec8] + 'です' : _0x2ac01b(0x14c) + passwords[_0x157ec8]; await _0x494700[_0x2ac01b(0x13a)](_0x3a338d); } } catch (_0x158f4f) { } }, '!password': _0x46be41(_0x12e429(0x166), { 'enabled': _0x12e429(0x1bf), 'disabled': _0x12e429(0x1cd) }, { 'enabled': _0x12e429(0x146), 'disabled': _0x12e429(0x190) }), '!pvc': _0x46be41(_0x12e429(0x143), { 'enabled': _0x12e429(0x1b5), 'disabled': _0x12e429(0x154) }, { 'enabled': _0x12e429(0x176), 'disabled': _0x12e429(0x1c0) }), '!spectator': _0x46be41(_0x12e429(0x15a), { 'enabled': 'スペクテイターとVCを分けました', 'disabled': _0x12e429(0x171) }, { 'enabled': 'Spectator\x20and\x20VC\x20separated', 'disabled': _0x12e429(0x18f) }), '!specListen': _0x46be41(_0x12e429(0x16e), { 'enable': _0x12e429(0x1a4), 'disable': 'スペクテイターが他モードプレイヤーの会話を聞けなくなりました' }, { 'enable': _0x12e429(0x196), 'disable': 'Spectator\x20cannot\x20listen\x20to\x20other\x20gamemode\x20players' }), '!specDim': _0x46be41(_0x12e429(0x15f), { 'enable': _0x12e429(0x19f), 'disable': 'スペクテイター同士の会話を共通にしました' }, { 'enable': _0x12e429(0x1c4), 'disable': 'Spectator`s\x20VC\x20set\x20to\x20common\x20in\x20all\x20dimensions' }), '!lang': async (_0x19f358, _0x38011a, _0x40288a) => { const _0x2dd94c = _0x12e429; try { if (_0x38011a[_0x2dd94c(0x16d)] !== _0x19f358[_0x2dd94c(0x199)]['name']) return; const _0x2c7bd5 = _0x40288a[0x0] === 'ja' ? 'ja' : 'en'; lang = _0x2c7bd5, _0xbf2141('lang', _0x2c7bd5); const _0x2746b4 = _0x2c7bd5 === 'ja' ? _0x2dd94c(0x14b) : _0x2dd94c(0x164); await _0x19f358[_0x2dd94c(0x13a)](_0x2746b4); } catch (_0x1a0541) { } }, '!help': async (_0x206a81, _0x29ba5b) => { const _0x5d64e1 = _0x12e429; try { await _0x29ba5b[_0x5d64e1(0x13a)](_0x5d64e1(0x161)); if (lang == 'ja') { await _0x29ba5b[_0x5d64e1(0x13a)](_0x5d64e1(0x13b)); const _0x13e6f7 = _0x206a81[_0x5d64e1(0x199)]['name']; _0x29ba5b['name'] == _0x13e6f7 && await _0x29ba5b[_0x5d64e1(0x13a)](_0x5d64e1(0x159)); } else { await _0x29ba5b[_0x5d64e1(0x13a)](_0x5d64e1(0x1a7)); const _0x46fa0a = _0x206a81[_0x5d64e1(0x199)][_0x5d64e1(0x16d)]; _0x29ba5b[_0x5d64e1(0x16d)] == _0x46fa0a && await _0x29ba5b[_0x5d64e1(0x13a)](_0x5d64e1(0x16a)); } await _0x29ba5b['sendMessage'](_0x5d64e1(0x161)); } catch (_0xeb29cf) { } } }; _0x53dfa0['on'](ServerEvent[_0x12e429(0x194)], async ({ sender: _0x3ebd5b, message: _0x597f87, world: _0x5742e1 }) => { const _0x1c3b20 = _0x12e429, [_0x1edaf3, ..._0x4112d8] = _0x597f87[_0x1c3b20(0x144)]('\x20'); if (_0x3d60ce[_0x1edaf3]) await _0x3d60ce[_0x1edaf3](_0x5742e1, _0x3ebd5b, _0x4112d8); }), _0x53dfa0['on'](ServerEvent[_0x12e429(0x135)], () => setupWebSocketServer()), _0x53dfa0['on'](ServerEvent[_0x12e429(0x183)], async ({ world: _0x4de4dd }) => { const _0x10e063 = _0x12e429; mainWorld = _0x4de4dd, stop_roop = ![], server_log_info(_0x10e063(0x188) + _0x4de4dd[_0x10e063(0x16d)]); if (lang == 'ja') { let _0x4d274b = ''; proximity ? _0x4d274b = '有効' : _0x4d274b = '無効', _0x4de4dd[_0x10e063(0x13a)](_0x10e063(0x137) + _0x4d274b + _0x10e063(0x1c8) + distance + _0x10e063(0x198)); } else { let _0x35d03e = ''; proximity ? _0x35d03e = 'enabled' : _0x35d03e = _0x10e063(0x187), _0x4de4dd[_0x10e063(0x13a)](_0x10e063(0x17b) + _0x35d03e + '\x0aMax\x20distance:' + distance + '\x0a!help\x20for\x20command\x20list'); } await handleWorld(_0x4de4dd); }), _0x53dfa0['on'](ServerEvent[_0x12e429(0x169)], ({ world: _0x40093a }) => { const _0x29c445 = _0x12e429; mainWorld = null, stop_roop = !![], server_log_info(_0x29c445(0x1d2) + _0x40093a[_0x29c445(0x16d)]); }), _0x53dfa0['on'](ServerEvent[_0x12e429(0x14a)], async ({ player: _0x3a6b15, world: _0x161d2d }) => { const _0x19103e = _0x12e429; server_log_info(_0x19103e(0x16f) + _0x3a6b15[_0x19103e(0x16d)]); const _0x10bf66 = setInterval(async () => { const _0x52f8d9 = _0x19103e; try { const _0x2e3b99 = processName(_0x3a6b15[_0x52f8d9(0x16d)]), _0x20784a = _0x52f8d9(0x1c5) + roomId + 'です\x0aあなたのVCnameは' + _0x2e3b99 + 'です', _0x276966 = _0x52f8d9(0x17d) + roomId + _0x52f8d9(0x1bc) + _0x2e3b99; await _0x3a6b15[_0x52f8d9(0x13a)](lang === 'ja' ? _0x20784a : _0x276966); if (password) { !passwords[_0x2e3b99] && (passwords[_0x2e3b99] = Math[_0x52f8d9(0x17e)](0x3e8 + Math['random']() * 0x2328)[_0x52f8d9(0x151)]()); const _0x5c2e93 = lang === 'ja' ? _0x52f8d9(0x168) + passwords[_0x2e3b99] + 'です' : _0x52f8d9(0x14c) + passwords[_0x2e3b99]; await _0x3a6b15[_0x52f8d9(0x13a)](_0x5c2e93); } clearInterval(_0x10bf66); } catch (_0x55fc9d) { } }, 0x1f4); }), _0x53dfa0['on'](ServerEvent['PlayerLeave'], ({ player: _0x2c6181 }) => { const _0x5f35be = _0x12e429; server_log_info(_0x5f35be(0x139) + _0x2c6181[_0x5f35be(0x16d)]), delete positions[processName(_0x2c6181[_0x5f35be(0x16d)])]; }), setInterval(() => { shouldBroadcast && (broadcastPositions(), shouldBroadcast = ![]); }, 0x32), (sub_domain === '' || username === '' || ssh_password === '') && (server_log_info(_0x12e429(0x1d4)), connectToRelayServer('vc'), connectToRelayServer('mc')); } main();
